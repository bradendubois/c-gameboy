#ifndef CONSTANTS_H
#define CONSTANTS_H

#include <stdint.h>
#include <tuple>
#include <vector>

enum GAMEBOY_MODEL {
    DMG0 = 0,
    DMG,
    MGB,
    SGB,
    SGB2,
    CGB,
    AGB
};


enum REGISTER {
    R_A,
    R_F,
    R_B,
    R_C,
    R_D,
    R_E,
    R_H,
    R_L,
    R_SP,
    R_PC
};

enum PPU_LAYER {
    L_SPRITE,
    L_WINDOW,
    L_BACKGROUND
};

constexpr uint8_t DISPLAY_W = 160;
constexpr uint8_t DISPLAY_H = 144;

constexpr uint16_t BACKGROUND_N = 256;

enum TILE_MAP_AREA {
    _9800_9BFF,
    _9C00_9FFF
};

enum BG_WINDOW_TILE_AREA {
    _8800_97FF,
    _8000_8FFF
};

enum PPU_MODE {
    _0_HBLANK,
    _1_VBLANK,
    _2_OAM_SEARCH,
    _3_OAM_TRANSFER
};

enum BG_OR_WINDOW {
    BG,
    WINDOW
};


constexpr uint16_t W_RAM_SIZE = 0x2000;
constexpr uint16_t H_RAM_SIZE = 0x80;
constexpr uint16_t OAM_SIZE = 0xA0;



const std::pair<uint16_t, uint8_t> HARDWARE_REGISTER_DEFAULTS[56]{{0xFF00, 0xCF}, {0xFF01, 0x00}, {0xFF02, 0x7E}, {0xFF04, 0x18}, {0xFF05, 0x00}, {0xFF06, 0x00}, {0xFF07, 0xF8}, {0xFF0F, 0xE1}, {0xFF10, 0x80}, {0xFF11, 0xBF}, {0xFF12, 0xF3}, {0xFF13, 0xFF}, {0xFF14, 0xBF}, {0xFF16, 0x3F}, {0xFF17, 0x00}, {0xFF18, 0xFF}, {0xFF19, 0xBF}, {0xFF1A, 0x7F}, {0xFF1B, 0xFF}, {0xFF1C, 0x9F}, {0xFF1D, 0xFF}, {0xFF1E, 0xBF}, {0xFF20, 0xFF}, {0xFF21, 0x00}, {0xFF22, 0x00}, {0xFF23, 0xBF}, {0xFF24, 0x77}, {0xFF25, 0xF3}, {0xFF26, 0xF1}, {0xFF40, 0x91}, {0xFF41, 0x81}, {0xFF42, 0x00}, {0xFF43, 0x00}, {0xFF44, 0x91}, {0xFF45, 0x00}, {0xFF46, 0xFF}, {0xFF47, 0xFC}, {0xFF48, 0x00}, {0xFF49, 0x00}, {0xFF4A, 0x00}, {0xFF4B, 0x00}, {0xFF4D, 0xFF}, {0xFF4F, 0xFF}, {0xFF51, 0xFF}, {0xFF52, 0xFF}, {0xFF53, 0xFF}, {0xFF54, 0xFF}, {0xFF55, 0xFF}, {0xFF56, 0xFF}, {0xFF56, 0xFF}, {0xFF68, 0xFF}, {0xFF69, 0xFF}, {0xFF6A, 0xFF}, {0xFF6B, 0xFF}, {0xFF70, 0xFF}, {0xFFFF, 0x00}};

const std::pair<uint16_t, uint8_t> HARDWARE_REGISTER_VARIANTS[7][5]{
    {{0xFF00, 0xCF}, {0xFF04, 0x18}, {0xFF26, 0xF1}, {0xFF41, 0x81}, {0xFF44, 0x91}},   // DMG0
    {{0xFF00, 0xCF}, {0xFF04, 0xAB}, {0xFF26, 0xF1}, {0xFF41, 0x85}, {0xFF44, 0x00}},   // DMG
    {{0xFF00, 0xCF}, {0xFF04, 0xAB}, {0xFF26, 0xF1}, {0xFF41, 0x85}, {0xFF44, 0x00}},   // MGB
    {{0xFF00, 0xC7}, {0xFF04, 0x00}, {0xFF26, 0xF0}, {0xFF41, 0x00}, {0xFF44, 0x00}},   // SGB
    {{0xFF00, 0xCF}, {0xFF04, 0x00}, {0xFF26, 0xF0}, {0xFF41, 0x00}, {0xFF44, 0x00}},   // SGB2
    {{0xFF00, 0xC7}, {0xFF04, 0x00}, {0xFF26, 0xF1}, {0xFF41, 0x00}, {0xFF44, 0x00}},   // CGB
    {{0xFF00, 0xCF}, {0xFF04, 0x00}, {0xFF26, 0xF1}, {0xFF41, 0x00}, {0xFF44, 0x00}}    // AGB
};



enum DEBUG_PARAMETER {
    OPCODE_VALUE,
    REGISTER_VALUE,
    MMU_WRITE,
    MMU_READ,
    SERIAL_WRITE,
};

enum DEBUG_TIME {
    BEFORE,
    AFTER,
    NA
};

enum DEBUG_RESPONSE {
    NONE,
    EXCEPTION,
    PRINT,
    HALT
};


#endif
